% This MATLAB code generated from Pre-trained Neural Network Application-copyright@Kevin Chng@TechSource System;
clc;
clear all;

%% load the dataset
imds = imageDatastore('D:\lxh\dataset\train_single', ...
'IncludeSubfolders',true, ...
'LabelSource','foldernames');

imds = imageDatastore('D:\lxh\dataset\train_single', ...
'IncludeSubfolders',true, ...
'LabelSource','foldernames');

% Ensure the dataset is balance and suficient
DataSetInfo = countEachLabel(imds);

%% Split Data to TrainData and ValidationData
[imdsTrain,imdsValidation] = splitEachLabel(imds,0.70,'randomized');

%% Load Pretrained Network
net = googlenet;

%% Get the input size of first layer
if class(net) ~= "nnet.cnn.layer.Layer"
     inputSize = net.Layers(1).InputSize;
else
     inputSize = net(1).InputSize;
end

%% Replace Layers & Get the input size of first layer
if isa(net,'SeriesNetwork') 
     lgraph = layerGraph(net.Layers);
else
     lgraph = layerGraph(net);
end
[learnableLayer,classLayer] = findLayersToReplace(lgraph);
numClasses = numel(DataSetInfo.Label);
if isa(learnableLayer,'nnet.cnn.layer.FullyConnectedLayer')
     newLearnableLayer = fullyConnectedLayer(numClasses, ...
        'Name','new_fc', ...
        'WeightLearnRateFactor',10, ...
        'BiasLearnRateFactor',10);
elseif isa(learnableLayer,'nnet.cnn.layer.Convolution2DLayer')
     newLearnableLayer = convolution2dLayer(1,numClasses, ...
        'Name','new_conv', ...
        'WeightLearnRateFactor',10, ...
        'BiasLearnRateFactor',10);
end
lgraph = replaceLayer(lgraph,learnableLayer.Name,newLearnableLayer);
newClassLayer = classificationLayer('Name','new_classoutput')
lgraph = replaceLayer(lgraph,classLayer.Name,newClassLayer);

%% Image Data Augmentation
imageAugmenter = imageDataAugmenter(...
    'RandXReflection',false,...
    'RandXReflection',false,...
    'RandRotation',[0.00 0.00],...
    'RandScale',[1.00 1.00],...
    'RandXScale',[1.00 1.00],...
    'RandYScale',[1.00 1.00],...
    'RandXShear',[0.00 0.00],...
    'RandYShear',[0.00 0.00],...
    'RandXTranslation',[0.00 0.00],...
    'RandYTranslation',[0.00 0.00]);
augimdsTrain = augmentedImageDatastore(inputSize,imdsTrain, ...
'DataAugmentation',imageAugmenter);
augimdsValidation = augmentedImageDatastore(inputSize,imdsValidation);

%% Training Option
options = trainingOptions('sgdm', ...
'Plots','training-progress',...
'Verbose',0,...
'VerboseFrequency',50,...
'MaxEpochs',5,...
'MiniBatchSize',4,...
'Shuffle','every-epoch',...
'ValidationData',augimdsValidation, ...
'ValidationFrequency',3,...
'ValidationPatience',5, ...
'InitialLearnRate',0.000100, ...
'LearnRateSchedule','none', ...
'LearnRateDropPeriod',10, ...
'LearnRateDropFactor',0.10, ...
'L2Regularization',0.000100, ...
'Momentum',0.90, ...
'GradientThreshold',Inf, ...
'GradientThresholdMethod','l2norm', ...
'SequenceLength','longest', ...
'SequencePaddingValue',0, ...
'ExecutionEnvironment','gpu');

%% Training
netTransfer = trainNetwork(augimdsTrain,lgraph,options);

%% Classifying
[YPred,score] = classify(netTransfer,augimdsValidation);

%% Accuracy
YValidation = imdsValidation.Labels;
accuracy = mean(YPred == YValidation)


% 保存模型
save('googlenet_1119.mat', 'netTransfer');
